{"version":3,"sources":["serviceWorker.js","reducers.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","actions.js","constants.js","index.js"],"names":["Boolean","window","location","hostname","match","initialStateSearch","searchField","initialStateRobots","isPending","robots","error","Card","name","email","id","className","alt","src","CardList","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","this","Component","App","onRequestRobots","filteredRobots","filter","robot","toLowerCase","includes","onSearchChange","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMidlleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.deb4e371.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\r\n    CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants.js';\r\n\r\n\r\n\r\nconst initialStateSearch={\r\n    searchField:''\r\n}\r\nexport const searchRobots=(state=initialStateSearch,action={})=>\r\n{\r\n    switch(action.type)\r\n    {\r\n        case CHANGE_SEARCH_FIELD : \r\n        return Object.assign({},state,{searchField:action.payload});\r\n        default :\r\n        return state;\r\n\r\n    }\r\n}\r\n\r\nconst initialStateRobots={\r\nisPending:false,\r\nrobots:[],\r\nerror:''\r\n\r\n\r\n}\r\nexport const requestRobots=(state=initialStateRobots,action={})=>\r\n{\r\n    switch(action.type)\r\n    {\r\n        case REQUEST_ROBOTS_PENDING : \r\n        return Object.assign({},state,{isPending:true});\r\n        case REQUEST_ROBOTS_SUCCESS : \r\n        return Object.assign({},state,{robots:action.payload,isPending:false});\r\n        case REQUEST_ROBOTS_FAILED : \r\n        return Object.assign({},state,{error:action.payload,isPending:false});\r\n        default :\r\n        return state;\r\n\r\n    }\r\n}","import React from 'react';\r\n\r\nconst Card = ({name,email,id}) =>{\r\n\r\n\r\n    return(\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n<img alt='robots' src={`https://robohash.org/${id}?200*200`}/> \r\n<div>\r\n    <h2>{name}</h2>\r\n    <p>{email}</p>\r\n</div>\r\n        </div>\r\n\r\n\r\n    );\r\n\r\n}\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                robots.map((user, i) => {\r\n                    return (\r\n\r\n                        <Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email} />\r\n                    );\r\n\r\n                })\r\n            }\r\n\r\n        </div>\r\n\r\n    );\r\n\r\n}\r\nexport default CardList;","import React from 'react';\r\nconst SearchBox=({searchChange})=>{\r\nreturn(\r\n    <div className='pa2'>\r\n     \r\n    \r\n     <input className='pa3 ba b--green bg-lightest-blue' type='search' placeholder='search Robots' onChange={searchChange}/>\r\n    </div>\r\n\r\n   \r\n);\r\n\r\n\r\n}\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll=(props)=>\r\n{\r\n\r\nreturn(<div style={{overflowY:'scroll',border:'1px solid black',height:'800px'}}>\r\n    {props.children}\r\n</div>\r\n); \r\n}\r\nexport default Scroll;","import React, { Component } from 'react';\r\n// import { render } from '@testing-library/react';\r\nclass ErrorBoundry extends Component{\r\nconstructor (props)\r\n{\r\n    super(props);\r\n    this.state={\r\n        hasError:false\r\n    }\r\n\r\n   \r\n\r\n}\r\nrender(){\r\n\r\nif(this.state.hasError)\r\n{\r\n    return(<h1>oooops something went wrong</h1>);\r\n    \r\n}\r\nreturn( this.props.children);\r\n    \r\n}\r\n\r\n\r\n}\r\nexport default ErrorBoundry;","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList';\r\n// import { robots} from './Robots';\r\nimport SearchBox from '../components/SearchBox';\r\nimport './App.css';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry'\r\n// import { render } from '@testing-library/react';\r\nimport {connect} from 'react-redux';\r\nimport {setSearchField,requestRobots} from '../actions.js';\r\n\r\nconst mapStateToProps = state=>\r\n{\r\n\r\n    return{\r\n        searchField : state.searchRobots.searchField,\r\n        robots:state.requestRobots.robots,\r\n        isPending:state.requestRobots.isPending,\r\n        error:state.requestRobots.error\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch)=>{\r\n    return{\r\n        onSearchChange:(event)=>dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots:()=>dispatch(requestRobots())\r\n    }\r\n}\r\n\r\nclass App extends Component {\r\n\r\n   \r\n    componentDidMount() {\r\n       \r\n      this.props.onRequestRobots();\r\n\r\n    }\r\n    \r\n    render() {\r\n\r\n        const filteredRobots = this.props.robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(this.props.searchField.toLowerCase());\r\n        })\r\n\r\n        return (\r\n            <div className='tc'>\r\n                <h1 className=\"f2\"> RoboFriends</h1>\r\n                <SearchBox searchChange={this.props.onSearchChange} />\r\n                <Scroll>\r\n                    <ErrorBoundry>\r\n\r\n                <CardList robots={filteredRobots} />\r\n                    </ErrorBoundry>\r\n\r\n                </Scroll>\r\n            </div>\r\n\r\n\r\n        );\r\n\r\n    }\r\n}\r\nexport default connect(mapStateToProps,mapDispatchToProps)(App) ;","import {\r\n    CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants.js';\r\nexport const setSearchField = (text) => ({\r\n\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n})\r\n\r\nexport const requestRobots = () =>(dispatch)=> {\r\n\r\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then( response => response.json())\r\n    .then( data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n    .catch( error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\r\n\r\n         }\r\n","export const CHANGE_SEARCH_FIELD ='CHANGE_SEARCH_FIELD';\r\nexport const REQUEST_ROBOTS_PENDING ='REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS ='REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED ='REQUEST_ROBOTS_FAILED';\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport {Provider} from 'react-redux';\nimport {createStore,applyMiddleware,combineReducers} from 'redux';\nimport {searchRobots,requestRobots} from './reducers';\nimport {createLogger} from 'redux-logger';\nimport App from './containers/App';\nimport thunkMidlleware from 'redux-thunk';\n\nconst logger =createLogger();\nconst rootReducer=combineReducers({searchRobots,requestRobots})\nconst store = createStore(rootReducer,applyMiddleware(thunkMidlleware,logger))\n\n\nReactDOM.render( <Provider store={store}>\n <App />\n</Provider>\n  , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}